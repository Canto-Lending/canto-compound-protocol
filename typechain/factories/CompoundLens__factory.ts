/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CompoundLens, CompoundLensInterface } from "../CompoundLens";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalancesAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "compSupplySpeed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "compBorrowSpeed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenMetadataAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "compSupplySpeed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "compBorrowSpeed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenUnderlyingPrice",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenUnderlyingPriceAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenUnderlyingPrice[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract ComptrollerLensInterface",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLimits",
    outputs: [
      {
        components: [
          {
            internalType: "contract CToken[]",
            name: "markets",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortfall",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.AccountLimits",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract Canto",
        name: "canto",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadata",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract Canto",
        name: "canto",
        type: "address",
      },
      {
        internalType: "contract ComptrollerLensInterface",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCompBalanceMetadataExt",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allocated",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CompBalanceMetadataExt",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "contract GovernorBravoInterface",
        name: "governor",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "proposalIds",
        type: "uint256[]",
      },
    ],
    name: "getGovBravoProposals",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "eta",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "targets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "string[]",
            name: "signatures",
            type: "string[]",
          },
          {
            internalType: "bytes[]",
            name: "calldatas",
            type: "bytes[]",
          },
          {
            internalType: "bool",
            name: "canceled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct CompoundLens.GovBravoProposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50612e4b806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80634b70d84b116100665780634b70d84b1461014c57806375d80e901461016c5780637dd8f6d91461018c578063bdf950c9146101ac578063c5ae5934146101cc5761009e565b80630972bf8b146100a3578063158eca8b146100cc5780631ea63741146100ec5780632b2d5ed61461010c578063416405d71461012c575b600080fd5b6100b66100b13660046121ad565b6101ec565b6040516100c39190612c01565b60405180910390f35b6100df6100da36600461226f565b61028f565b6040516100c39190612c83565b6100ff6100fa3660046122bd565b610b11565b6040516100c39190612ca0565b61011f61011a36600461216c565b610d81565b6040516100c39190612c23565b61013f61013a36600461228d565b610e1d565b6040516100c39190612cae565b61015f61015a36600461216c565b610eb2565b6040516100c39190612c12565b61017f61017a36600461231e565b610f43565b6040516100c39190612c34565b61019f61019a36600461228d565b6110e3565b6040516100c39190612c64565b6101bf6101ba36600461228d565b61121f565b6040516100c39190612c75565b6101df6101da36600461226f565b6115bf565b6040516100c39190612c92565b6040805183815260208085028201019091526060908390829082801561022c57816020015b610219611b4e565b8152602001906001900390816102115790505b50905060005b828110156102835761026487878381811061024957fe5b905060200201602061025e919081019061226f565b8661121f565b82828151811061027057fe5b6020908102919091010152600101610232565b509150505b9392505050565b610297611b8d565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156102d457600080fd5b505af11580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061030c91908101906123c5565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561034957600080fd5b505afa15801561035d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103819190810190612300565b9050600080826001600160a01b0316638e8f294b876040518263ffffffff1660e01b81526004016103b29190612bca565b604080518083038186803b1580156103c957600080fd5b505afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104019190810190612235565b915091506000806104a2886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104809190810190612373565b604051806040016040528060048152602001630c68aa8960e31b815250611751565b156104b35750600090506012610613565b6000889050806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f157600080fd5b505afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610529919081019061208a565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561056457600080fd5b505afa158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061059c919081019061208a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d457600080fd5b505afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061060c9190810190612426565b60ff169150505b600080610620878b6117aa565b91509150600080905060006060896001600160a01b03168a6001600160a01b0316634a584432905060e01b8e60405160200161065c9190612bca565b60408051601f198184030181529082905261067a9291602001612ba2565b60408051601f198184030181529082905261069491612bbe565b6000604051808303816000865af19150503d80600081146106d1576040519150601f19603f3d011682016040523d82523d6000602084013e6106d6565b606091505b509150915081156106f857808060200190516106f591908101906123c5565b92505b6040518061022001604052808e6001600160a01b031681526020018c81526020018e6001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061078a91908101906123c5565b81526020018e6001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061080091908101906123c5565b81526020018e6001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061087691908101906123c5565b81526020018e6001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108ec91908101906123c5565b81526020018e6001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092a57600080fd5b505afa15801561093e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061096291908101906123c5565b81526020018e6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109d891908101906123c5565b81526020018e6001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a4e91908101906123c5565b81526020018a15158152602001898152602001886001600160a01b031681526020018e6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ae19190810190612426565b60ff168152602001878152602001868152602001858152602001848152509b505050505050505050505050919050565b610b19611c25565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190610b48908690600401612bca565b60206040518083038186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b9891908101906123c5565b6040516374d7814960e11b81529091506001600160a01b0385169063e9af029290610bc7908690600401612bca565b600060405180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a0823190610c28908790600401612bca565b60206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c7891908101906123c5565b90506000856001600160a01b031663cc7ebdc4866040518263ffffffff1660e01b8152600401610ca89190612bca565b60206040518083038186803b158015610cc057600080fd5b505afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cf891908101906123c5565b90506000610d2e82846040518060400160405280600f81526020016e1cdd5b4818d85b9d1bc81d1bdd185b608a1b815250611a2e565b90506000610d6282866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b815250611a5e565b6040805180820190915295865260208601525092979650505050505050565b60408051828152602080840282010190915260609082908290828015610dc157816020015b610dae611c3f565b815260200190600190039081610da65790505b50905060005b82811015610e1257610df3868683818110610dde57fe5b90506020020160206101da919081019061226f565b828281518110610dff57fe5b6020908102919091010152600101610dc7565b509150505b92915050565b610e25611c56565b6040805160208101918290526370a0823160e01b909152806001600160a01b0385166370a08231610e598660248501612bca565b60206040518083038186803b158015610e7157600080fd5b505afa158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ea991908101906123c5565b90529392505050565b60408051828152602080840282010190915260609082908290828015610ef257816020015b610edf611b8d565b815260200190600190039081610ed75790505b50905060005b82811015610e1257610f24868683818110610f0f57fe5b90506020020160206100da919081019061226f565b828281518110610f3057fe5b6020908102919091010152600101610ef8565b60608083839050604051908082528060200260200182016040528015610f8357816020015b610f70611c69565b815260200190600190039081610f685790505b50905060005b838110156110da57606080606080896001600160a01b031663328dd9828a8a88818110610fb257fe5b905060200201356040518263ffffffff1660e01b8152600401610fd59190612cbc565b60006040518083038186803b158015610fed57600080fd5b505afa158015611001573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261102991908101906120b0565b93509350935093506040518061012001604052806000815260200160006001600160a01b03168152602001600081526020018581526020018481526020018381526020018281526020016000151581526020016000151581525086868151811061108f57fe5b60200260200101819052506110ca8686815181106110a957fe5b60200260200101518b8b8b898181106110be57fe5b90506020020135611a8a565b505060019092019150610f899050565b50949350505050565b6110eb611cc2565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b815260040161111c9190612bca565b60606040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061116c91908101906123e3565b9250925092508260001461117f57600080fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc6111b38960648501612bca565b60006040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112079190810190612201565b81526020810193909352604090920152949350505050565b611227611b4e565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190611256908690600401612bd8565b60206040518083038186803b15801561126e57600080fd5b505afa158015611282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112a691908101906123c5565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b81526004016112d69190612bd8565b602060405180830381600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061132891908101906123c5565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b81526004016113589190612bd8565b602060405180830381600087803b15801561137257600080fd5b505af1158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113aa91908101906123c5565b90506000806113eb886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561044457600080fd5b156114055750506001600160a01b03851680319031611582565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561144557600080fd5b505afa158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061147d919081019061208a565b6040516370a0823160e01b81529091506001600160a01b038216906370a08231906114ac908c90600401612bd8565b60206040518083038186803b1580156114c457600080fd5b505afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114fc91908101906123c5565b604051636eb1769f60e11b81529094506001600160a01b0382169063dd62ed3e9061152d908c908e90600401612be6565b60206040518083038186803b15801561154557600080fd5b505afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061157d91908101906123c5565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b6115c7611c3f565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561160257600080fd5b505afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061163a9190810190612300565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561167757600080fd5b505afa15801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116af9190810190612300565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b81526004016116f79190612c45565b60206040518083038186803b15801561170f57600080fd5b505afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061174791908101906123c5565b9052949350505050565b6000816040516020016117649190612bbe565b604051602081830303815290604052805190602001208360405160200161178b9190612bbe565b6040516020818303038152906040528051906020012014905092915050565b6040516000908190819081906060906001600160a01b03881690636aa875b560e01b906117db908990602001612bca565b60408051601f19818403018152908290526117f99291602001612ba2565b60408051601f198184030181529082905261181391612bbe565b6000604051808303816000865af19150503d8060008114611850576040519150601f19603f3d011682016040523d82523d6000602084013e611855565b606091505b50915091508115611877578080602001905161187491908101906123c5565b92505b60405160009081906060906001600160a01b038b16906303d290cf60e61b906118a4908c90602001612bca565b60408051601f19818403018152908290526118c29291602001612ba2565b60408051601f19818403018152908290526118dc91612bbe565b6000604051808303816000865af19150503d8060008114611919576040519150601f19603f3d011682016040523d82523d6000602084013e61191e565b606091505b50915091508115611940578080602001905161193d91908101906123c5565b92505b84158061194b575081155b15611a1d576040516000906060906001600160a01b038d1690631d7b33d760e01b9061197b908e90602001612bca565b60408051601f19818403018152908290526119999291602001612ba2565b60408051601f19818403018152908290526119b391612bbe565b6000604051808303816000865af19150503d80600081146119f0576040519150601f19603f3d011682016040523d82523d6000602084013e6119f5565b606091505b50915091508115611a1a5780806020019051611a1491908101906123c5565b94508497505b50505b5093955093505050505b9250929050565b600083830182858210156110da5760405162461bcd60e51b8152600401611a559190612c53565b60405180910390fd5b60008184841115611a825760405162461bcd60e51b8152600401611a559190612c53565b505050900390565b611a92611ce3565b60405163013cf08b60e01b81526001600160a01b0384169063013cf08b90611abe908590600401612cbc565b60a06040518083038186803b158015611ad657600080fd5b505afa158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b0e91908101906123a7565b918452506020808201516001600160a01b031690840152604080820151908401526060810151151560e08401526080015115156101009092019190915250565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610220016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b604080518082019091526000808252602082015290565b6040518060200160405280600081525090565b6040518061012001604052806000815260200160006001600160a01b0316815260200160008152602001606081526020016060815260200160608152602001606081526020016000151581526020016000151581525090565b60405180606001604052806060815260200160008152602001600081525090565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b8035610e1781612dcd565b8051610e1781612dcd565b600082601f830112611d3857600080fd5b8151611d4b611d4682612cf0565b612cca565b91508181835260208401935060208101905083856020840282011115611d7057600080fd5b60005b83811015611d9c5781611d868882611d1c565b8452506020928301929190910190600101611d73565b5050505092915050565b600082601f830112611db757600080fd5b8151611dc5611d4682612cf0565b81815260209384019390925082018360005b83811015611d9c5781518601611ded8882611f8c565b8452506020928301929190910190600101611dd7565b60008083601f840112611e1557600080fd5b5081356001600160401b03811115611e2c57600080fd5b602083019150836020820283011115611a2757600080fd5b600082601f830112611e5557600080fd5b8151611e63611d4682612cf0565b91508181835260208401935060208101905083856020840282011115611e8857600080fd5b60005b83811015611d9c5781611e9e8882611fe6565b8452506020928301929190910190600101611e8b565b600082601f830112611ec557600080fd5b8151611ed3611d4682612cf0565b81815260209384019390925082018360005b83811015611d9c5781518601611efb8882611f8c565b8452506020928301929190910190600101611ee5565b600082601f830112611f2257600080fd5b8151611f30611d4682612cf0565b91508181835260208401935060208101905083856020840282011115611f5557600080fd5b60005b83811015611d9c5781611f6b8882612074565b8452506020928301929190910190600101611f58565b8051610e1781612de4565b600082601f830112611f9d57600080fd5b8151611fab611d4682612d10565b91508082526020830160208301858383011115611fc757600080fd5b611fd2838284612d97565b50505092915050565b8035610e1781612ded565b8051610e1781612ded565b600060a0828403121561200357600080fd5b61200d60a0612cca565b9050600061201b8484612074565b825250602061202c84848301611d1c565b602083015250604061204084828501612074565b604083015250606061205484828501611f81565b606083015250608061206884828501611f81565b60808301525092915050565b8051610e1781612df6565b8051610e1781612dff565b60006020828403121561209c57600080fd5b60006120a88484611d1c565b949350505050565b600080600080608085870312156120c657600080fd5b84516001600160401b038111156120dc57600080fd5b6120e887828801611d27565b94505060208501516001600160401b0381111561210457600080fd5b61211087828801611f11565b93505060408501516001600160401b0381111561212c57600080fd5b61213887828801611eb4565b92505060608501516001600160401b0381111561215457600080fd5b61216087828801611da6565b91505092959194509250565b6000806020838503121561217f57600080fd5b82356001600160401b0381111561219557600080fd5b6121a185828601611e03565b92509250509250929050565b6000806000604084860312156121c257600080fd5b83356001600160401b038111156121d857600080fd5b6121e486828701611e03565b935093505060206121f786828701611d11565b9150509250925092565b60006020828403121561221357600080fd5b81516001600160401b0381111561222957600080fd5b6120a884828501611e44565b6000806040838503121561224857600080fd5b60006122548585611f81565b925050602061226585828601612074565b9150509250929050565b60006020828403121561228157600080fd5b60006120a88484611fdb565b600080604083850312156122a057600080fd5b60006122ac8585611fdb565b925050602061226585828601611d11565b6000806000606084860312156122d257600080fd5b60006122de8686611fdb565b93505060206122ef86828701611fdb565b92505060406121f786828701611d11565b60006020828403121561231257600080fd5b60006120a88484611fe6565b60008060006040848603121561233357600080fd5b600061233f8686611fdb565b93505060208401356001600160401b0381111561235b57600080fd5b61236786828701611e03565b92509250509250925092565b60006020828403121561238557600080fd5b81516001600160401b0381111561239b57600080fd5b6120a884828501611f8c565b600060a082840312156123b957600080fd5b60006120a88484611ff1565b6000602082840312156123d757600080fd5b60006120a88484612074565b6000806000606084860312156123f857600080fd5b60006124048686612074565b935050602061241586828701612074565b92505060406121f786828701612074565b60006020828403121561243857600080fd5b60006120a8848461207f565b600061245083836124d4565b505060200190565b60006102888383612835565b6000612450838361286d565b600061247c83836128be565b505060c00190565b60006124908383612934565b50506102200190565b60006124a58383612a88565b505060400190565b60006102888383612ace565b60006124508383612b99565b6124ce81612d8c565b82525050565b6124ce81612d4f565b60006124e882612d3d565b6124f28185612d41565b93506124fd83612d37565b8060005b8381101561252b5781516125158882612444565b975061252083612d37565b925050600101612501565b509495945050505050565b600061254182612d3d565b61254b8185612d41565b93508360208202850161255d85612d37565b8060005b85811015612597578484038952815161257a8582612458565b945061258583612d37565b60209a909a0199925050600101612561565b5091979650505050505050565b60006125af82612d3d565b6125b98185612d41565b93506125c483612d37565b8060005b8381101561252b5781516125dc8882612464565b97506125e783612d37565b9250506001016125c8565b60006125fd82612d3d565b6126078185612d41565b93508360208202850161261985612d37565b8060005b8581101561259757848403895281516126368582612458565b945061264183612d37565b60209a909a019992505060010161261d565b600061265e82612d3d565b6126688185612d41565b935061267383612d37565b8060005b8381101561252b57815161268b8882612470565b975061269683612d37565b925050600101612677565b60006126ac82612d3d565b6126b68185612d41565b93506126c183612d37565b8060005b8381101561252b5781516126d98882612484565b97506126e483612d37565b9250506001016126c5565b60006126fa82612d3d565b6127048185612d41565b935061270f83612d37565b8060005b8381101561252b5781516127278882612499565b975061273283612d37565b925050600101612713565b600061274882612d3d565b6127528185612d41565b93508360208202850161276485612d37565b8060005b85811015612597578484038952815161278185826124ad565b945061278c83612d37565b60209a909a0199925050600101612768565b60006127a982612d3d565b6127b38185612d41565b93506127be83612d37565b8060005b8381101561252b5781516127d688826124b9565b97506127e183612d37565b9250506001016127c2565b6124ce81612d5a565b6124ce61280182612d5f565b612d83565b600061281182612d3d565b61281b8185612d4a565b935061282b818560208601612d97565b9290920192915050565b600061284082612d3d565b61284a8185612d41565b935061285a818560208601612d97565b61286381612dc3565b9093019392505050565b6124ce81612d6c565b805160608084526000919084019061288e82826125a4565b91505060208301516128a36020860182612b99565b5060408301516128b66040860182612b99565b509392505050565b805160c08301906128cf84826124d4565b5060208201516128e26020850182612b99565b5060408201516128f56040850182612b99565b5060608201516129086060850182612b99565b50608082015161291b6080850182612b99565b5060a082015161292e60a0850182612b99565b50505050565b805161022083019061294684826124d4565b5060208201516129596020850182612b99565b50604082015161296c6040850182612b99565b50606082015161297f6060850182612b99565b5060808201516129926080850182612b99565b5060a08201516129a560a0850182612b99565b5060c08201516129b860c0850182612b99565b5060e08201516129cb60e0850182612b99565b506101008201516129e0610100850182612b99565b506101208201516129f56101208501826127ec565b50610140820151612a0a610140850182612b99565b50610160820151612a1f6101608501826124d4565b50610180820151612a34610180850182612b99565b506101a0820151612a496101a0850182612b99565b506101c0820151612a5e6101c0850182612b99565b506101e0820151612a736101e0850182612b99565b5061020082015161292e610200850182612b99565b80516040830190612a9984826124d4565b50602082015161292e6020850182612b99565b80516040830190612a998482612b99565b8051602083019061292e8482612b99565b8051600090610120840190612ae38582612b99565b506020830151612af660208601826124d4565b506040830151612b096040860182612b99565b5060608301518482036060860152612b2182826124dd565b91505060808301518482036080860152612b3b828261279e565b91505060a083015184820360a0860152612b5582826125f2565b91505060c083015184820360c0860152612b6f8282612536565b91505060e0830151612b8460e08601826127ec565b506101008301516128b66101008601826127ec565b6124ce81612d83565b6000612bae82856127f5565b6004820191506120a88284612806565b60006102888284612806565b60208101610e1782846124d4565b60208101610e1782846124c5565b60408101612bf482856124c5565b61028860208301846124d4565b602080825281016102888184612653565b6020808252810161028881846126a1565b6020808252810161028881846126ef565b60208082528101610288818461273d565b60208101610e17828461286d565b602080825281016102888184612835565b602080825281016102888184612876565b60c08101610e1782846128be565b6102208101610e178284612934565b60408101610e178284612a88565b60408101610e178284612aac565b60208101610e178284612abd565b60208101610e178284612b99565b6040518181016001600160401b0381118282101715612ce857600080fd5b604052919050565b60006001600160401b03821115612d0657600080fd5b5060209081020190565b60006001600160401b03821115612d2657600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b6000610e1782612d77565b151590565b6001600160e01b03191690565b6000610e1782612d4f565b6001600160a01b031690565b90565b60ff1690565b6000610e1782612d6c565b60005b83811015612db2578181015183820152602001612d9a565b8381111561292e5750506000910152565b601f01601f191690565b612dd681612d4f565b8114612de157600080fd5b50565b612dd681612d5a565b612dd681612d6c565b612dd681612d83565b612dd681612d8656fea365627a7a72315820a9ee90054dea5daaf45200e59dfb18ceca1e889c1b14193facb1bf5dfbe2f8136c6578706572696d656e74616cf564736f6c63430005100040";

export class CompoundLens__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CompoundLens> {
    return super.deploy(overrides || {}) as Promise<CompoundLens>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CompoundLens {
    return super.attach(address) as CompoundLens;
  }
  connect(signer: Signer): CompoundLens__factory {
    return super.connect(signer) as CompoundLens__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundLensInterface {
    return new utils.Interface(_abi) as CompoundLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundLens {
    return new Contract(address, _abi, signerOrProvider) as CompoundLens;
  }
}
