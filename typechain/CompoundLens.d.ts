/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CompoundLensInterface extends ethers.utils.Interface {
  functions: {
    "cTokenBalances(address,address)": FunctionFragment;
    "cTokenBalancesAll(address[],address)": FunctionFragment;
    "cTokenMetadata(address)": FunctionFragment;
    "cTokenMetadataAll(address[])": FunctionFragment;
    "cTokenUnderlyingPrice(address)": FunctionFragment;
    "cTokenUnderlyingPriceAll(address[])": FunctionFragment;
    "getAccountLimits(address,address)": FunctionFragment;
    "getCompBalanceMetadata(address,address)": FunctionFragment;
    "getCompBalanceMetadataExt(address,address,address)": FunctionFragment;
    "getGovBravoProposals(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cTokenBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenBalancesAll",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenMetadataAll",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenUnderlyingPriceAll",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLimits",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompBalanceMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompBalanceMetadataExt",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovBravoProposals",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "cTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenBalancesAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenMetadataAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenUnderlyingPriceAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompBalanceMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompBalanceMetadataExt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovBravoProposals",
    data: BytesLike
  ): Result;

  events: {};
}

export class CompoundLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundLensInterface;

  functions: {
    cTokenBalances(
      cToken: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cTokenBalancesAll(
      cTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cTokenMetadata(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cTokenMetadataAll(
      cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cTokenUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { cToken: string; underlyingPrice: BigNumber }]
    >;

    cTokenUnderlyingPriceAll(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { cToken: string; underlyingPrice: BigNumber })[]]
    >;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], BigNumber, BigNumber] & {
          markets: string[];
          liquidity: BigNumber;
          shortfall: BigNumber;
        }
      ]
    >;

    getCompBalanceMetadata(
      canto: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { balance: BigNumber }]>;

    getCompBalanceMetadataExt(
      canto: string,
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGovBravoProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string[],
          BigNumber[],
          string[],
          string[],
          boolean,
          boolean
        ] & {
          proposalId: BigNumber;
          proposer: string;
          eta: BigNumber;
          targets: string[];
          values: BigNumber[];
          signatures: string[];
          calldatas: string[];
          canceled: boolean;
          executed: boolean;
        })[]
      ]
    >;
  };

  cTokenBalances(
    cToken: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cTokenBalancesAll(
    cTokens: string[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cTokenMetadata(
    cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cTokenMetadataAll(
    cTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cTokenUnderlyingPrice(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { cToken: string; underlyingPrice: BigNumber }
  >;

  cTokenUnderlyingPriceAll(
    cTokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { cToken: string; underlyingPrice: BigNumber })[]
  >;

  getAccountLimits(
    comptroller: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber, BigNumber] & {
      markets: string[];
      liquidity: BigNumber;
      shortfall: BigNumber;
    }
  >;

  getCompBalanceMetadata(
    canto: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { balance: BigNumber }>;

  getCompBalanceMetadataExt(
    canto: string,
    comptroller: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGovBravoProposals(
    governor: string,
    proposalIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string[],
      BigNumber[],
      string[],
      string[],
      boolean,
      boolean
    ] & {
      proposalId: BigNumber;
      proposer: string;
      eta: BigNumber;
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      canceled: boolean;
      executed: boolean;
    })[]
  >;

  callStatic: {
    cTokenBalances(
      cToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        cToken: string;
        balanceOf: BigNumber;
        borrowBalanceCurrent: BigNumber;
        balanceOfUnderlying: BigNumber;
        tokenBalance: BigNumber;
        tokenAllowance: BigNumber;
      }
    >;

    cTokenBalancesAll(
      cTokens: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        cToken: string;
        balanceOf: BigNumber;
        borrowBalanceCurrent: BigNumber;
        balanceOfUnderlying: BigNumber;
        tokenBalance: BigNumber;
        tokenAllowance: BigNumber;
      })[]
    >;

    cTokenMetadata(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        cToken: string;
        exchangeRateCurrent: BigNumber;
        supplyRatePerBlock: BigNumber;
        borrowRatePerBlock: BigNumber;
        reserveFactorMantissa: BigNumber;
        totalBorrows: BigNumber;
        totalReserves: BigNumber;
        totalSupply: BigNumber;
        totalCash: BigNumber;
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        underlyingAssetAddress: string;
        cTokenDecimals: BigNumber;
        underlyingDecimals: BigNumber;
        compSupplySpeed: BigNumber;
        compBorrowSpeed: BigNumber;
        borrowCap: BigNumber;
      }
    >;

    cTokenMetadataAll(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        cToken: string;
        exchangeRateCurrent: BigNumber;
        supplyRatePerBlock: BigNumber;
        borrowRatePerBlock: BigNumber;
        reserveFactorMantissa: BigNumber;
        totalBorrows: BigNumber;
        totalReserves: BigNumber;
        totalSupply: BigNumber;
        totalCash: BigNumber;
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        underlyingAssetAddress: string;
        cTokenDecimals: BigNumber;
        underlyingDecimals: BigNumber;
        compSupplySpeed: BigNumber;
        compBorrowSpeed: BigNumber;
        borrowCap: BigNumber;
      })[]
    >;

    cTokenUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { cToken: string; underlyingPrice: BigNumber }
    >;

    cTokenUnderlyingPriceAll(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { cToken: string; underlyingPrice: BigNumber })[]
    >;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber, BigNumber] & {
        markets: string[];
        liquidity: BigNumber;
        shortfall: BigNumber;
      }
    >;

    getCompBalanceMetadata(
      canto: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getCompBalanceMetadataExt(
      canto: string,
      comptroller: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; allocated: BigNumber }
    >;

    getGovBravoProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string[],
        BigNumber[],
        string[],
        string[],
        boolean,
        boolean
      ] & {
        proposalId: BigNumber;
        proposer: string;
        eta: BigNumber;
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
        canceled: boolean;
        executed: boolean;
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    cTokenBalances(
      cToken: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cTokenBalancesAll(
      cTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cTokenMetadata(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cTokenMetadataAll(
      cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cTokenUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cTokenUnderlyingPriceAll(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompBalanceMetadata(
      canto: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompBalanceMetadataExt(
      canto: string,
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGovBravoProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cTokenBalances(
      cToken: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cTokenBalancesAll(
      cTokens: string[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cTokenMetadata(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cTokenMetadataAll(
      cTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cTokenUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cTokenUnderlyingPriceAll(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountLimits(
      comptroller: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompBalanceMetadata(
      canto: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompBalanceMetadataExt(
      canto: string,
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGovBravoProposals(
      governor: string,
      proposalIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
